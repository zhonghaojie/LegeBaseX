package com.lege.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lege.android.base.db.KugouFavoriteSong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KUGOU_FAVORITE_SONG".
*/
public class KugouFavoriteSongDao extends AbstractDao<KugouFavoriteSong, String> {

    public static final String TABLENAME = "KUGOU_FAVORITE_SONG";

    /**
     * Properties of entity KugouFavoriteSong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SongId = new Property(0, String.class, "songId", true, "SONG_ID");
        public final static Property SongName = new Property(1, String.class, "songName", false, "SONG_NAME");
        public final static Property SongExtraId = new Property(2, String.class, "songExtraId", false, "SONG_EXTRA_ID");
    };


    public KugouFavoriteSongDao(DaoConfig config) {
        super(config);
    }
    
    public KugouFavoriteSongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KUGOU_FAVORITE_SONG\" (" + //
                "\"SONG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: songId
                "\"SONG_NAME\" TEXT," + // 1: songName
                "\"SONG_EXTRA_ID\" TEXT);"); // 2: songExtraId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KUGOU_FAVORITE_SONG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KugouFavoriteSong entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String songExtraId = entity.getSongExtraId();
        if (songExtraId != null) {
            stmt.bindString(3, songExtraId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KugouFavoriteSong entity) {
        stmt.clearBindings();
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(1, songId);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(2, songName);
        }
 
        String songExtraId = entity.getSongExtraId();
        if (songExtraId != null) {
            stmt.bindString(3, songExtraId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public KugouFavoriteSong readEntity(Cursor cursor, int offset) {
        KugouFavoriteSong entity = new KugouFavoriteSong( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // songId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // songName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // songExtraId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KugouFavoriteSong entity, int offset) {
        entity.setSongId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSongName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSongExtraId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(KugouFavoriteSong entity, long rowId) {
        return entity.getSongId();
    }
    
    @Override
    public String getKey(KugouFavoriteSong entity) {
        if(entity != null) {
            return entity.getSongId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
